name: "[auto] - Post Pull Request"

on:
  push:
    branches:
      - main
  #workflow_dispatch:
  #  inputs:
  #    state:
  #      description: 'state intitials'
  #      required: true
  #      type: choice
  #      options:
  #        - co
  #        - wa
  
jobs:
  data-scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Generate GitHub App Pipeline Token
        id: generate-pipeline-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_PIPELINE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_PIPELINE_PRIVATE_KEY }}

      # Use this next step for git commits
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.generate-pipeline-token.outputs.token }}

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main
          token: ${{ steps.generate-pipeline-token.outputs.token }}
          fetch-depth: 0  # Fetch all history for accurate diffing

      - name: Extract updated states
        id: extract-states
        run: |
          # Get the list of updated files
          UPDATED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})

          # Extract unique state directories from the updated files
          STATES=$(echo "$UPDATED_FILES" | grep -oP '^data_source/\K[^/]+' | sort -u)

          # Output the states as a comma-separated list
          echo "states=$STATES" >> $GITHUB_OUTPUT

      - name: Setup mise
        uses: jdx/mise-action@v3.2.0
        with:
          version: '2025.9.6'
          cache: true
          log_level: debug
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install poetry dependencies
        run: |
          mise ls
          poetry install

      - name: Update progress files for each state
        run: |
          for state in ${{ steps.extract-states.outputs.states }}; do
            echo "Processing state: $state"
            python scripts/create_update_progress_file.py "$state"
          done

          poetry run python ocdid_progress_tracker/main.py
          poetry run python ocdid_progress_tracker/generate_readme.py

      - name: Commit changes to main
        run: |
          # Configure git
          git config --global user.name '${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          # Commit changes if any images were updated
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Update government_progress.yml file for states: ${{ steps.extract-states.outputs.states }}"
            git push -u origin main
          fi
           
