name: Data Intake
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      server_url:
        description: 'CivicPatch Server URL (e.g. https://civicpatch.example.com)'
        required: true
      user_email:
        description: 'Email associated with your CivicPatch account'
        required: true
      request_id:
        description: 'Unique request ID for this data intake'
        required: true
      jurisdiction_id:
        description: 'ocdid for the municipality'
        required: true
      zip_file_url:
        description: 'Presigned URL of the ZIP file containing YAML data'
        required: true

jobs:
  data-intake:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
      head_ref: ${{ steps.extract_branch.outputs.branch_name }}
      municipality_path: ${{ steps.create-pr.outputs.municipality-path }}
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Prebuilt Docker Image
        run: docker pull ghcr.io/civicpatch/civicpatch-slim:latest

      - name: Set up mise
        uses: jdx/mise-action@v3.2.0
        with:
          version: '2025.9.6'
          cache: true
          log_level: debug
          working_directory: civicpatch # Doesn't seem to work?
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download ZIP file
        run: |
          curl -L "${{ github.event.inputs.zip_file_url }}" -o /tmp/payload.zip

      - name: Generate GitHub Pipeline Token
        id: generate-pipeline-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_PIPELINE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_PIPELINE_PRIVATE_KEY }}

      # Use this next step for git commits
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.generate-pipeline-token.outputs.token }}

      - name: Unzip data into root project directory
        run: |
          unzip -o /tmp/payload.zip -d .
          ls -l 
          ls -l data
          ls -l data_source
          git status

      - name: Get branch name from zip_file_url
        id: extract_branch
        run: |
          ZIP_FILE=$(basename "${{ github.event.inputs.zip_file_url }}")
          BRANCH_NAME="${ZIP_FILE%%.zip*}"  # Remove everything starting from .zip
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create a PR
        id: create-pr
        env:
          SERVER_URL: ${{ github.event.inputs.server_url }}
          USER_EMAIL: ${{ github.event.inputs.user_email }}
          GH_TOKEN: ${{ steps.generate-pipeline-token.outputs.token }}
        run: |
          git config --global user.name '${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          git checkout -B ${{ steps.extract_branch.outputs.branch_name }}
          git add .
          git commit -m "Add municipal officials for ${{ github.event.inputs.jurisdiction_id }} by ${{ github.event.inputs.user_email }}"
          git push -u origin ${{ steps.extract_branch.outputs.branch_name }} 

          echo ${{ github.actor }}

          github_pull_request_url=$(gh pr create \
            --title "Data intake for ${{ github.event.inputs.jurisdiction_id }} by ${{ github.event.inputs.user_email }}" \
            --body "Automated data intake for request ID: ${{ github.event.inputs.request_id }}. Please review the data before merging." \
            --base main
          )
          github_pr_number=$(basename "$github_pull_request_url")
          echo "pr_number=$github_pr_number" >> $GITHUB_OUTPUT
  
  process-pull-request:
    needs: data-intake
    uses: ./.github/workflows/zz_process_pull_request.yml
    with:
      pr_number: ${{ fromJson(needs.data-intake.outputs.pr_number) }}
      head_ref: ${{ needs.data-intake.outputs.head_ref }}
      jurisdiction_id: ${{ github.event.inputs.jurisdiction_id }}
      upload_images: true
    secrets:
      GH_APP_BOT_PIPELINE_APP_ID: ${{ secrets.GH_APP_BOT_PIPELINE_APP_ID }}
      GH_APP_BOT_PIPELINE_PRIVATE_KEY: ${{ secrets.GH_APP_BOT_PIPELINE_PRIVATE_KEY }}
      GH_APP_BOT_APPROVE_APP_ID: ${{ secrets.GH_APP_BOT_APPROVE_APP_ID }}
      GH_APP_BOT_APPROVE_PRIVATE_KEY: ${{ secrets.GH_APP_BOT_APPROVE_PRIVATE_KEY }}
      STORAGE_ENDPOINT: ${{ secrets.STORAGE_ENDPOINT }}
      STORAGE_ACCESS_KEY_ID: ${{ secrets.STORAGE_ACCESS_KEY_ID }}
      STORAGE_SECRET_ACCESS_KEY: ${{ secrets.STORAGE_SECRET_ACCESS_KEY }}
      GOOGLE_SHEETS_PRIVATE_KEY: ${{ secrets.GOOGLE_SHEETS_PRIVATE_KEY }}
      GOOGLE_SHEETS_CLIENT_EMAIL: ${{ secrets.GOOGLE_SHEETS_CLIENT_EMAIL }}
      GOOGLE_SHEETS_TOKEN_URI: ${{ secrets.GOOGLE_SHEETS_TOKEN_URI }}


