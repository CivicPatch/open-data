name: "[auto] Process Pull Request"

on:
  workflow_call:
    inputs:
      pr_number:
        description: 'The number of the PR to comment on'
        required: true
        type: number
      head_ref:
        description: 'The head ref (branch name) of the PR'
        required: true
        type: string
      jurisdiction_id:
        description: 'The ocdid jurisdiction identifier for the municipality'
        required: true
        type: string
      upload_images:
        description: 'Whether to upload images to CDN'
        required: false 
        type: boolean
        default: false

    secrets:
      GH_APP_BOT_PIPELINE_APP_ID:
        required: true
      GH_APP_BOT_PIPELINE_PRIVATE_KEY:
        required: true
      GH_APP_BOT_APPROVE_APP_ID:
        required: true
      GH_APP_BOT_APPROVE_PRIVATE_KEY:
        required: true
      STORAGE_ENDPOINT:
        required: false
      STORAGE_ACCESS_KEY_ID:
        required: false
      STORAGE_SECRET_ACCESS_KEY:
        required: false
      GOOGLE_SHEETS_PRIVATE_KEY:
        required: false
      GOOGLE_SHEETS_CLIENT_EMAIL:
        required: false
      GOOGLE_SHEETS_TOKEN_URI:
        required: false

jobs:
  update-comments:
    runs-on: ubuntu-latest

    steps:
      - name: Generate GitHub App Pipeline Token
        id: generate-pipeline-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_PIPELINE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_PIPELINE_PRIVATE_KEY }}

      # Use this next step for git commits
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.generate-pipeline-token.outputs.token }}

      - name: Generate GitHub App Approve Token
        id: generate-approve-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.GH_APP_BOT_APPROVE_APP_ID }}
          private-key: ${{ secrets.GH_APP_BOT_APPROVE_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.head_ref }} # Checkout the branch
          token: ${{ steps.generate-pipeline-token.outputs.token }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up mise
        uses: jdx/mise-action@v3.2.0
        with:
          version: '2025.9.6'
          cache: true
          log_level: debug
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Prebuilt Docker Image
        run: docker pull ghcr.io/civicpatch/civicpatch-slim:latest

      - name: Print the branch name
        run: echo "The branch name is ${{ inputs.head_ref }}"

      - name: Upload images to CDN
        if: ${{ inputs.upload_images == true }} 
        env:
          FRIENDLY_STORAGE_HOST: ${{ vars.FRIENDLY_STORAGE_HOST }}
          STORAGE_ENDPOINT: ${{ secrets.STORAGE_ENDPOINT }}
          STORAGE_ACCESS_KEY_ID: ${{ secrets.STORAGE_ACCESS_KEY_ID }}
          STORAGE_SECRET_ACCESS_KEY: ${{ secrets.STORAGE_SECRET_ACCESS_KEY }}
        run: |
          mise upload-images-to-cdn --jurisdiction-id "${{ inputs.jurisdiction_id }}"
          # Remove local images after upload TODO

      - name: Commit image updates
        if: ${{ inputs.upload_images == true }} 
        run: |
          # Configure git
          git config --global user.name '${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate-pipeline-token.outputs.app-slug }}[bot]@users.noreply.github.com'

          # Commit changes if any images were updated
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Upload images to CDN for ${{ inputs.jurisdiction_id }}"
            git push -u origin ${{ inputs.head_ref }}
          fi
    
      - name: Upload costs.json to Google Sheets
        env:
          GOOGLE_SHEETS_SPREADSHEET_ID: ${{ vars.GOOGLE_SHEETS_SPREADSHEET_ID }} 
          GOOGLE_SHEETS_PRIVATE_KEY: ${{ secrets.GOOGLE_SHEETS_PRIVATE_KEY }}
          GOOGLE_SHEETS_CLIENT_EMAIL: ${{ secrets.GOOGLE_SHEETS_CLIENT_EMAIL }}
          GOOGLE_SHEETS_TOKEN_URI: ${{ secrets.GOOGLE_SHEETS_TOKEN_URI }}
        run: |
          mise send-costs-to-google-sheets --jurisdiction-id "${{ inputs.jurisdiction_id }}"
      
      - name: Create/Update Data Comment
        env:
          GITHUB_USERNAME: civic-patch-pipeline-bot
          GITHUB_TOKEN: ${{ steps.generate-pipeline-token.outputs.token }}
        run: |
          PR_NUMBER=${{ inputs.pr_number }}

          COMMENT=$(mise generate-data-comment --jurisdiction-id ${{ inputs.jurisdiction_id }} )
          gh pr comment $PR_NUMBER --edit-last --create-if-none --body "$COMMENT"

      - name: Create Approval/Disapproval Comment
        env:
          GITHUB_USERNAME: civic-patch-approve-bot
          GITHUB_TOKEN: ${{ steps.generate-approve-token.outputs.token }}
        run: |
          PR_NUMBER=${{ inputs.pr_number }}
          COMMENT=$(mise generate-review-comment --jurisdiction-id ${{ inputs.jurisdiction_id }} )

          if [ -n "$REJECTED_REASONS" ]; then
            gh pr review $PR_NUMBER --request-changes -b "$COMMENT"
          else
            gh pr review $PR_NUMBER --approve -b "$COMMENT"
          fi
       
